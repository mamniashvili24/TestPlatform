// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestPlatform.Database;

#nullable disable

namespace TestPlatform.Migrations
{
    [DbContext(typeof(TestPlatformContext))]
    [Migration("20230605055000_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("TestPlatform.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuetionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuetionId");

                    b.ToTable("Answeres");
                });

            modelBuilder.Entity("TestPlatform.Models.Quetion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Quetions");
                });

            modelBuilder.Entity("TestPlatform.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CorrectAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudetnIdNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("TestPlatform.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("TestPlatform.Models.Answer", b =>
                {
                    b.HasOne("TestPlatform.Models.Quetion", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuetionId");
                });

            modelBuilder.Entity("TestPlatform.Models.Quetion", b =>
                {
                    b.HasOne("TestPlatform.Models.Test", null)
                        .WithMany("Quetions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("TestPlatform.Models.Result", b =>
                {
                    b.HasOne("TestPlatform.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestPlatform.Models.Quetion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TestPlatform.Models.Test", b =>
                {
                    b.Navigation("Quetions");
                });
#pragma warning restore 612, 618
        }
    }
}
